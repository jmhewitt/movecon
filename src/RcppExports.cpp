// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "movecon_types.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// Test__AppliedLikelihoodFamily
double Test__AppliedLikelihoodFamily(std::vector<double> eastings, std::vector<double> northings, std::vector<double> semi_majors, std::vector<double> semi_minors, std::vector<double> orientations, std::vector<std::size_t> t, std::size_t nt, Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > states);
RcppExport SEXP _movecon_Test__AppliedLikelihoodFamily(SEXP eastingsSEXP, SEXP northingsSEXP, SEXP semi_majorsSEXP, SEXP semi_minorsSEXP, SEXP orientationsSEXP, SEXP tSEXP, SEXP ntSEXP, SEXP statesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type eastings(eastingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type northings(northingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_majors(semi_majorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_minors(semi_minorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type orientations(orientationsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > >::type states(statesSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__AppliedLikelihoodFamily(eastings, northings, semi_majors, semi_minors, orientations, t, nt, states));
    return rcpp_result_gen;
END_RCPP
}
// Test__Directional_Covariate
double Test__Directional_Covariate(std::string x, std::string y);
RcppExport SEXP _movecon_Test__Directional_Covariate(SEXP xSEXP, SEXP ySEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::string >::type x(xSEXP);
    Rcpp::traits::input_parameter< std::string >::type y(ySEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Directional_Covariate(x, y));
    return rcpp_result_gen;
END_RCPP
}
// build_statespace
Rcpp::XPtr<RookDirectionalStatespace> build_statespace(Rcpp::NumericVector& eastings, Rcpp::NumericVector& northings, Rcpp::NumericMatrix& covariates, Rcpp::NumericVector& linear_constraint);
RcppExport SEXP _movecon_build_statespace(SEXP eastingsSEXP, SEXP northingsSEXP, SEXP covariatesSEXP, SEXP linear_constraintSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type eastings(eastingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type northings(northingsSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type covariates(covariatesSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type linear_constraint(linear_constraintSEXP);
    rcpp_result_gen = Rcpp::wrap(build_statespace(eastings, northings, covariates, linear_constraint));
    return rcpp_result_gen;
END_RCPP
}
// extract_statespace_location
Rcpp::List extract_statespace_location(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::size_t easting_ind, std::size_t northing_ind);
RcppExport SEXP _movecon_extract_statespace_location(SEXP statespaceSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_statespace_location(statespace, easting_ind, northing_ind));
    return rcpp_result_gen;
END_RCPP
}
// extract_statespace_state
Rcpp::List extract_statespace_state(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::string last_movement_direction, std::size_t easting_ind, std::size_t northing_ind);
RcppExport SEXP _movecon_extract_statespace_state(SEXP statespaceSEXP, SEXP last_movement_directionSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::string >::type last_movement_direction(last_movement_directionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    rcpp_result_gen = Rcpp::wrap(extract_statespace_state(statespace, last_movement_direction, easting_ind, northing_ind));
    return rcpp_result_gen;
END_RCPP
}
// build_statespace_search
Rcpp::XPtr<RookDirectionalStatespaceSearch> build_statespace_search(Rcpp::XPtr<RookDirectionalStatespace> statespace);
RcppExport SEXP _movecon_build_statespace_search(SEXP statespaceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    rcpp_result_gen = Rcpp::wrap(build_statespace_search(statespace));
    return rcpp_result_gen;
END_RCPP
}
// nearest_location_in_domain
Rcpp::List nearest_location_in_domain(Rcpp::XPtr<RookDirectionalStatespaceSearch> statespace_search, double easting, double northing);
RcppExport SEXP _movecon_nearest_location_in_domain(SEXP statespace_searchSEXP, SEXP eastingSEXP, SEXP northingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespaceSearch> >::type statespace_search(statespace_searchSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    rcpp_result_gen = Rcpp::wrap(nearest_location_in_domain(statespace_search, easting, northing));
    return rcpp_result_gen;
END_RCPP
}
// states_at_nearest_location_in_domain
Rcpp::List states_at_nearest_location_in_domain(Rcpp::XPtr<RookDirectionalStatespaceSearch> statespace_search, double easting, double northing);
RcppExport SEXP _movecon_states_at_nearest_location_in_domain(SEXP statespace_searchSEXP, SEXP eastingSEXP, SEXP northingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespaceSearch> >::type statespace_search(statespace_searchSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    rcpp_result_gen = Rcpp::wrap(states_at_nearest_location_in_domain(statespace_search, easting, northing));
    return rcpp_result_gen;
END_RCPP
}
// Test__Particle_Steps
Rcpp::List Test__Particle_Steps(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::string last_movement_direction, std::size_t easting_ind, std::size_t northing_ind, double directional_persistence, Eigen::VectorXd beta, double delta, std::size_t nsteps);
RcppExport SEXP _movecon_Test__Particle_Steps(SEXP statespaceSEXP, SEXP last_movement_directionSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP, SEXP directional_persistenceSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP nstepsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::string >::type last_movement_direction(last_movement_directionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    Rcpp::traits::input_parameter< double >::type directional_persistence(directional_persistenceSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nsteps(nstepsSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Particle_Steps(statespace, last_movement_direction, easting_ind, northing_ind, directional_persistence, beta, delta, nsteps));
    return rcpp_result_gen;
END_RCPP
}
// Test__Particle_Filter_Likelihood
Rcpp::List Test__Particle_Filter_Likelihood(/* likelihood components */     std::vector<double> eastings, std::vector<double> northings, std::vector<double> semi_majors, std::vector<double> semi_minors, std::vector<double> orientations, std::vector<std::size_t> t, std::size_t nt, /* filter components */     Rcpp::XPtr<RookDirectionalStatespace> statespace, Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > initial_latent_state_sample, /* model parameters */     double directional_persistence, Eigen::VectorXd beta, double delta);
RcppExport SEXP _movecon_Test__Particle_Filter_Likelihood(SEXP eastingsSEXP, SEXP northingsSEXP, SEXP semi_majorsSEXP, SEXP semi_minorsSEXP, SEXP orientationsSEXP, SEXP tSEXP, SEXP ntSEXP, SEXP statespaceSEXP, SEXP initial_latent_state_sampleSEXP, SEXP directional_persistenceSEXP, SEXP betaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< /* likelihood components */     std::vector<double> >::type eastings(eastingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type northings(northingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_majors(semi_majorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type semi_minors(semi_minorsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type orientations(orientationsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< /* filter components */     Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > >::type initial_latent_state_sample(initial_latent_state_sampleSEXP);
    Rcpp::traits::input_parameter< /* model parameters */     double >::type directional_persistence(directional_persistenceSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Particle_Filter_Likelihood(eastings, northings, semi_majors, semi_minors, orientations, t, nt, statespace, initial_latent_state_sample, directional_persistence, beta, delta));
    return rcpp_result_gen;
END_RCPP
}
// Particle_Filter_Likelihood_From_GPS
Rcpp::List Particle_Filter_Likelihood_From_GPS(/* likelihood components */     std::vector<double> eastings, std::vector<double> northings, std::vector<double> hdops, double uere, std::vector<std::size_t> t, std::size_t nt, /* filter components */     Rcpp::XPtr<RookDirectionalStatespace> statespace, Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > initial_latent_state_sample, /* model parameters */     double directional_persistence, Eigen::VectorXd beta, double delta);
RcppExport SEXP _movecon_Particle_Filter_Likelihood_From_GPS(SEXP eastingsSEXP, SEXP northingsSEXP, SEXP hdopsSEXP, SEXP uereSEXP, SEXP tSEXP, SEXP ntSEXP, SEXP statespaceSEXP, SEXP initial_latent_state_sampleSEXP, SEXP directional_persistenceSEXP, SEXP betaSEXP, SEXP deltaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< /* likelihood components */     std::vector<double> >::type eastings(eastingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type northings(northingsSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type hdops(hdopsSEXP);
    Rcpp::traits::input_parameter< double >::type uere(uereSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t> >::type t(tSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type nt(ntSEXP);
    Rcpp::traits::input_parameter< /* filter components */     Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< Rcpp::XPtr<         std::vector<RookDirectionalStatespace::StateType*>     > >::type initial_latent_state_sample(initial_latent_state_sampleSEXP);
    Rcpp::traits::input_parameter< /* model parameters */     double >::type directional_persistence(directional_persistenceSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    rcpp_result_gen = Rcpp::wrap(Particle_Filter_Likelihood_From_GPS(eastings, northings, hdops, uere, t, nt, statespace, initial_latent_state_sample, directional_persistence, beta, delta));
    return rcpp_result_gen;
END_RCPP
}
// Test__Particle_Gillespie_Steps
Rcpp::List Test__Particle_Gillespie_Steps(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::string last_movement_direction, std::size_t easting_ind, std::size_t northing_ind, double directional_persistence, Eigen::VectorXd beta, double delta, std::vector<double> times);
RcppExport SEXP _movecon_Test__Particle_Gillespie_Steps(SEXP statespaceSEXP, SEXP last_movement_directionSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP, SEXP directional_persistenceSEXP, SEXP betaSEXP, SEXP deltaSEXP, SEXP timesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::string >::type last_movement_direction(last_movement_directionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    Rcpp::traits::input_parameter< double >::type directional_persistence(directional_persistenceSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    Rcpp::traits::input_parameter< double >::type delta(deltaSEXP);
    Rcpp::traits::input_parameter< std::vector<double> >::type times(timesSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Particle_Gillespie_Steps(statespace, last_movement_direction, easting_ind, northing_ind, directional_persistence, beta, delta, times));
    return rcpp_result_gen;
END_RCPP
}
// sample_gaussian_states
Rcpp::List sample_gaussian_states(Rcpp::XPtr<RookDirectionalStatespaceSearch> statespace_search, double easting, double northing, double semi_major, double semi_minor, double orientation, std::size_t n);
RcppExport SEXP _movecon_sample_gaussian_states(SEXP statespace_searchSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP semi_majorSEXP, SEXP semi_minorSEXP, SEXP orientationSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespaceSearch> >::type statespace_search(statespace_searchSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< double >::type semi_major(semi_majorSEXP);
    Rcpp::traits::input_parameter< double >::type semi_minor(semi_minorSEXP);
    Rcpp::traits::input_parameter< double >::type orientation(orientationSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gaussian_states(statespace_search, easting, northing, semi_major, semi_minor, orientation, n));
    return rcpp_result_gen;
END_RCPP
}
// sample_gaussian_states_from_hdop_uere
Rcpp::List sample_gaussian_states_from_hdop_uere(Rcpp::XPtr<RookDirectionalStatespaceSearch> statespace_search, double easting, double northing, double hdop, double uere, std::size_t n);
RcppExport SEXP _movecon_sample_gaussian_states_from_hdop_uere(SEXP statespace_searchSEXP, SEXP eastingSEXP, SEXP northingSEXP, SEXP hdopSEXP, SEXP uereSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespaceSearch> >::type statespace_search(statespace_searchSEXP);
    Rcpp::traits::input_parameter< double >::type easting(eastingSEXP);
    Rcpp::traits::input_parameter< double >::type northing(northingSEXP);
    Rcpp::traits::input_parameter< double >::type hdop(hdopSEXP);
    Rcpp::traits::input_parameter< double >::type uere(uereSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(sample_gaussian_states_from_hdop_uere(statespace_search, easting, northing, hdop, uere, n));
    return rcpp_result_gen;
END_RCPP
}
// Test__Directional_Transition_Probabilities
Eigen::VectorXd Test__Directional_Transition_Probabilities(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::string last_movement_direction, std::size_t easting_ind, std::size_t northing_ind, double directional_persistence);
RcppExport SEXP _movecon_Test__Directional_Transition_Probabilities(SEXP statespaceSEXP, SEXP last_movement_directionSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP, SEXP directional_persistenceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::string >::type last_movement_direction(last_movement_directionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    Rcpp::traits::input_parameter< double >::type directional_persistence(directional_persistenceSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Directional_Transition_Probabilities(statespace, last_movement_direction, easting_ind, northing_ind, directional_persistence));
    return rcpp_result_gen;
END_RCPP
}
// Test__Location_Based_Movement_Transition_Rate
double Test__Location_Based_Movement_Transition_Rate(Rcpp::XPtr<RookDirectionalStatespace> statespace, std::string last_movement_direction, std::size_t easting_ind, std::size_t northing_ind, Eigen::VectorXd beta);
RcppExport SEXP _movecon_Test__Location_Based_Movement_Transition_Rate(SEXP statespaceSEXP, SEXP last_movement_directionSEXP, SEXP easting_indSEXP, SEXP northing_indSEXP, SEXP betaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::XPtr<RookDirectionalStatespace> >::type statespace(statespaceSEXP);
    Rcpp::traits::input_parameter< std::string >::type last_movement_direction(last_movement_directionSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type easting_ind(easting_indSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type northing_ind(northing_indSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type beta(betaSEXP);
    rcpp_result_gen = Rcpp::wrap(Test__Location_Based_Movement_Transition_Rate(statespace, last_movement_direction, easting_ind, northing_ind, beta));
    return rcpp_result_gen;
END_RCPP
}
// log_sum
double log_sum(const std::vector<double>& x);
RcppExport SEXP _movecon_log_sum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_sum(x));
    return rcpp_result_gen;
END_RCPP
}
// log_cumsum
std::vector<double> log_cumsum(const std::vector<double>& x);
RcppExport SEXP _movecon_log_cumsum(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::vector<double>& >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(log_cumsum(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_movecon_Test__AppliedLikelihoodFamily", (DL_FUNC) &_movecon_Test__AppliedLikelihoodFamily, 8},
    {"_movecon_Test__Directional_Covariate", (DL_FUNC) &_movecon_Test__Directional_Covariate, 2},
    {"_movecon_build_statespace", (DL_FUNC) &_movecon_build_statespace, 4},
    {"_movecon_extract_statespace_location", (DL_FUNC) &_movecon_extract_statespace_location, 3},
    {"_movecon_extract_statespace_state", (DL_FUNC) &_movecon_extract_statespace_state, 4},
    {"_movecon_build_statespace_search", (DL_FUNC) &_movecon_build_statespace_search, 1},
    {"_movecon_nearest_location_in_domain", (DL_FUNC) &_movecon_nearest_location_in_domain, 3},
    {"_movecon_states_at_nearest_location_in_domain", (DL_FUNC) &_movecon_states_at_nearest_location_in_domain, 3},
    {"_movecon_Test__Particle_Steps", (DL_FUNC) &_movecon_Test__Particle_Steps, 8},
    {"_movecon_Test__Particle_Filter_Likelihood", (DL_FUNC) &_movecon_Test__Particle_Filter_Likelihood, 12},
    {"_movecon_Particle_Filter_Likelihood_From_GPS", (DL_FUNC) &_movecon_Particle_Filter_Likelihood_From_GPS, 11},
    {"_movecon_Test__Particle_Gillespie_Steps", (DL_FUNC) &_movecon_Test__Particle_Gillespie_Steps, 8},
    {"_movecon_sample_gaussian_states", (DL_FUNC) &_movecon_sample_gaussian_states, 7},
    {"_movecon_sample_gaussian_states_from_hdop_uere", (DL_FUNC) &_movecon_sample_gaussian_states_from_hdop_uere, 6},
    {"_movecon_Test__Directional_Transition_Probabilities", (DL_FUNC) &_movecon_Test__Directional_Transition_Probabilities, 5},
    {"_movecon_Test__Location_Based_Movement_Transition_Rate", (DL_FUNC) &_movecon_Test__Location_Based_Movement_Transition_Rate, 5},
    {"_movecon_log_sum", (DL_FUNC) &_movecon_log_sum, 1},
    {"_movecon_log_cumsum", (DL_FUNC) &_movecon_log_cumsum, 1},
    {NULL, NULL, 0}
};

RcppExport void R_init_movecon(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
